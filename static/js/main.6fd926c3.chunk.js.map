{"version":3,"sources":["index.js"],"names":["Square","props","winpos","winnerPos","onClick","className","indexOf","k","value","Board","temp","map","i","j","squares","renderSquare","Game","status","useState","Array","fill","latestCheck","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","selectedItem","setSelectedItem","sortBy","setSortBy","setWinnerPos","handleSelectItem","step","current","winner","calculateWinner","moves","move","desc","toString","length","historyTemp","slice","concat","Math","floor","handleClick","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fd926c3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  const winpos = props.winnerPos\n  return (\n    <button onClick={props.onClick} className={winpos.indexOf(props.k) !== -1  ? \"square win\" : \"square\" }>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const renderSquare = (i) => {\n    return (\n      <Square\n        key={i}\n        k ={i}\n        winnerPos={props.winnerPos}\n        value={props.squares[i]}\n        onClick={() => props.onClick(i)}\n      />\n    );\n  }\n\n  const temp = [0, 1, 2];\n\n  return (\n    <div>\n      {\n        temp.map(i =>\n        (\n          <div key={i + \"abc\"} className=\"board-row\">\n            {\n              temp.map(j => renderSquare(3 * i + j))\n            }\n          </div>\n        )\n        )\n      }\n    </div>\n  );\n}\n\nfunction Game(props) {\n\n  const [history, setHistory] = useState([\n    {\n      squares: Array(9).fill(null),\n      latestCheck:[]\n      \n    }\n  ])\n\n  const [stepNumber, setStepNumber] = useState(0)\n  const [xIsNext, setXIsNext] = useState(true)\n  const [selectedItem, setSelectedItem] = useState(0)\n  const [sortBy, setSortBy] = useState(true);\n  const [winnerPos, setWinnerPos] = useState([])\n\n  const handleClickSortBy = () => {\n    setSortBy(!sortBy)\n  }\n\n  const handleClick = (i) => {\n    const historyTemp = history.slice(0, stepNumber + 1);\n    const current = historyTemp[historyTemp.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory(historyTemp.concat([\n      {\n        squares: squares,\n        latestCheck: [i%3, Math.floor(i/3)],\n        winnerPos: []\n      }\n    ]))\n    setStepNumber(historyTemp.length);\n    setXIsNext(!xIsNext)\n    setSelectedItem(selectedItem+1)\n    \n  }\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXIsNext((step % 2) === 0)\n  }\n\n  const handleSelectItem = (i) => {\n    jumpTo(i);\n    setSelectedItem(i);\n    setWinnerPos([]);\n  }\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n\n\n  const moves = history.map((step, move) => {\n    const desc = move ?\n      'Go to move #' + move + \". Position :(\" + step.latestCheck.toString() + \")\":\n      'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => { handleSelectItem(move) }} className={selectedItem === move ? \"bold-text\" : \"\"}>{desc}</button>\n      </li>\n    );\n  });\n\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner[0];\n    if(winnerPos.length===0)\n    {\n      setWinnerPos(winner[1]);\n    }\n  } else {\n    if(history.length<=9) status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n    else status = \"The game result is a draw \";\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={current.squares}\n          winnerPos= {winnerPos}\n          onClick={i => handleClick(i)}\n        />\n      </div>\n      <div className=\"game-info\">\n        <button onClick={handleClickSortBy}>{sortBy ? \"Ascending\" : \"Descending\"}</button>\n        <div>{status}</div>\n        <ol>{sortBy ? moves : moves.reverse()}</ol>\n      </div>\n    </div>\n  );\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner (squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      \n      return [squares[a],lines[i]];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}